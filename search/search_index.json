{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Usage # This is an unofficial Python API wrapper for the Australian Bank Up's API. Installation # Base Async Support pip install up-bank-api pip install up-bank-api [ async ] Setup # To use this library you will need a personal access token which can be retrieved from https://developer.up.com.au . When using this library you can either provide the token directly or use the environment variable UP_TOKEN . Sync Async Async Session from upbankapi import Client , NotAuthorizedException # implicitly use the environment variable UP_TOKEN client = Client () # or directly provide token client = Client ( token = \"MY_TOKEN\" ) # check the token is valid try : user_id = client . ping () print ( f \"Authorized: { user_id } \" ) except NotAuthorizedException : print ( \"The token is invalid\" ) import asyncio from upbankapi import AsyncClient , NotAuthorizedException async def main (): # implicitly use the environment variable UP_TOKEN client = AsyncClient () # or directly provide token client = AsyncClient ( token = \"MY_TOKEN\" ) # use a context manager to automatically close the aiohttp session async with AsyncClient () as client : try : user_id = await client . ping () print ( f \"Authorized: { user_id } \" ) except NotAuthorizedException : print ( \"The token is invalid\" ) if __name__ == \"__main__\" : asyncio . run ( main ()) import asyncio import aiohttp from upbankapi import AsyncClient , NotAuthorizedException async def main (): # use a context manager to automatically close the aiohttp session async with aiohttp . ClientSession () as session : # implicitly use the environment variable UP_TOKEN client = AsyncClient ( session = session ) # or directly provide token client = AsyncClient ( token = \"MY_TOKEN\" , session = session ) try : user_id = await client . ping () print ( f \"Authorized: { user_id } \" ) except NotAuthorizedException : print ( \"The token is invalid\" ) if __name__ == \"__main__\" : asyncio . run ( main ()) We will assume top-level await is possible for the following examples. Account # Sync Async from upbankapi import Client client = Client () accounts = client . accounts () # get the unique id of an account print ( accounts [ 1 ] . id ) # get a specific account by its unique id account = client . account ( \"d7cd1152-e78a-4ad7-8202-d27cddb02a28\" ) print ( account ) print ( account . balance ) from upbankapi import AsyncClient client = AsyncClient () accounts = await client . accounts () # get the unique id of an account # this is an async paginated list so we must use `await` to get an item # as it may need to make a request to fetch additional content. print (( await accounts [ 1 ]) . id ) # get a specific account by its unique id account = await client . account ( \"d7cd1152-e78a-4ad7-8202-d27cddb02a28\" ) print ( account ) print ( account . balance ) >>> \"d7cd1152-e78a-4ad7-8202-d27cddb02a28\" >>> < Account '\ud83d\udcb0 Savings' ( SAVER ): 12345.67 AUD > >>> 12345.67 Accounts # Sync Async Print all accounts and their transactions from upbankapi import Client , NotAuthorizedException client = Client () accounts = client . accounts () # list accounts for account in accounts : print ( account ) # list transactions for account for transaction in account . transactions ( limit = 10 ): print ( transaction ) >>> < Account 'Up Account' ( TRANSACTIONAL ): 1234.56 AUD > >>> < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > >>> < Account '\ud83d\udcb0 Savings' ( SAVER ): 12345.67 AUD > >>> < Transaction SETTLED : 10.0 AUD [ Interest ] > Print all accounts and their transactions from upbankapi import AsyncClient , NotAuthorizedException client = AsyncClient () accounts = await client . accounts () # list accounts async for account in accounts : print ( account ) # list transactions for account async for transaction in await account . transactions ( limit = 10 ): print ( transaction ) >>> < Account 'Up Account' ( TRANSACTIONAL ): 1234.56 AUD > >>> < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > >>> < Account '\ud83d\udcb0 Savings' ( SAVER ): 12345.67 AUD > >>> < Transaction SETTLED : 10.0 AUD [ Interest ] > Transaction # Sync Async from upbankapi import Client client = Client () # get a specific transaction by its unique id transaction = client . transaction ( \"17c577f2-ae8e-4622-90a7-87d95094c2a9\" ) print ( transaction ) print ( transaction . category ) # the API only gives us a partial category for the transaction, so we can # resolve the full category information using `.category()`. This will # return itself if it's already a full category object. print ( transaction . category . category ()) # we don't need to resolve the full category to use it, for example, # we can fetch all transactions from the parent category of the transaction. transactions = transaction . category . parent . transactions ( limit = 10 ) print ( list ( transactions )) >>> < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > >>> < PartialCategoryParent id = 'takeaway' parent = 'good-life' > >>> < Category 'Takeaway' : id = 'takeaway' parent = 'good-life' > >>> [ < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > ] from upbankapi import AsyncClient client = AsyncClient () # get a specific transaction by its unique id transaction = await client . transaction ( \"17c577f2-ae8e-4622-90a7-87d95094c2a9\" ) print ( transaction ) print ( transaction . category ) # the API only gives us a partial category for the transaction, so we can # resolve the full category information using `.category()`. This will # return itself if it's already a full category object. print ( await transaction . category . category ()) # we don't need to resolve the full category to use it, for example, # we can fetch all transactions from the parent category of the transaction. transactions = await transaction . category . parent . transactions ( limit = 10 ) print ([ x async for x in transactions ]) >>> < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > >>> < PartialCategoryParent id = 'takeaway' parent = 'good-life' > >>> < Category 'Takeaway' : id = 'takeaway' parent = 'good-life' > >>> [ < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > ] Transactions # Sync Async Get all transactions for all accounts print ( list ( client . transactions ())) >>> [ < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > , < Transaction SETTLED : 10.0 AUD [ Interest ] > ] Get all transactions for all accounts print ([ x async for x in await client . transactions ()]) >>> [ < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > , < Transaction SETTLED : 10.0 AUD [ Interest ] > ] Sync Async Get last 5 transactions for a given account SAVINGS_ID = \"d7cd1152-e78a-4ad7-8202-d27cddb02a28\" print ( client . account ( SAVINGS_ID ) . transactions ( limit = 5 )) # alternative which avoids making an extra request for the account details print ( client . transactions ( SAVINGS_ID , limit = 5 )) # using an account object account = client . account ( SAVINGS_ID ) print ( client . transactions ( account , limit = 5 )) >>> [ < Transaction SETTLED : 10.0 AUD [ Interest ] > ] Get last 5 transactions for a given account SAVINGS_ID = \"d7cd1152-e78a-4ad7-8202-d27cddb02a28\" print ( await ( await client . account ( SAVINGS_ID )) . transactions ( limit = 5 )) # alternative which avoids making an extra request for the account details print ( await client . transactions ( SAVINGS_ID , limit = 5 )) # using an account object account = await client . account ( SAVINGS_ID ) print ( await client . transactions ( account , limit = 5 )) >>> [ < Transaction SETTLED : 10.0 AUD [ Interest ] > ] Webhooks # Sync Async List users webhooks print ( list ( client . webhooks ())) >>> [ < Webhook '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' : https : // mywebhook . tld / c2f89ed40e26c936 ( Hello World ! ) > ] Get a specific webhook print ( client . webhook ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" )) # or equivalently print ( client . webhook . get ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" )) >>> < Webhook '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' : https : // mywebhook . tld / c2f89ed40e26c936 ( Hello World ! ) > Create a webhook print ( client . webhook . create ( \"https://mywebhook.tld/c2f89ed40e26c936\" , description = \"Hello World!\" ) ) >>> < Webhook '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' : https : // mywebhook . tld / c2f89ed40e26c936 ( Hello World ! ) > Interacting with a webhook webhook = client . webhook ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" ) # ping the webhook print ( webhook . ping ()) >>> < WebhookEvent PING : webhook_id = '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' > # get the webhooks logs print ( list ( webhook . logs ())) >>> [ < WebhookLog BAD_RESPONSE_CODE : response_code = 404 > ] # get the event associated with a log entry print ( webhook . logs ()[ 0 ] . event ) >>> < WebhookEvent PING : webhook_id = '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' > # delete the webhook, raises exception on failure, `True` on success. print ( webhook . delete ()) >>> True List users webhooks print ([ x async for x in await client . webhooks ()]) >>> [ < Webhook '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' : https : // mywebhook . tld / c2f89ed40e26c936 ( Hello World ! ) > ] Get a specific webhook print ( await client . webhook ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" )) # or equivalently print ( await client . webhook . get ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" )) >>> < Webhook '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' : https : // mywebhook . tld / c2f89ed40e26c936 ( Hello World ! ) > Create a webhook print ( await client . webhook . create ( \"https://mywebhook.tld/c2f89ed40e26c936\" , description = \"Hello World!\" ) ) >>> < Webhook '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' : https : // mywebhook . tld / c2f89ed40e26c936 ( Hello World ! ) > Interacting with a webhook webhook = await client . webhook ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" ) # ping the webhook print ( await webhook . ping ()) >>> < WebhookEvent PING : webhook_id = '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' > # get the webhooks logs print ([ x async for x in await webhook . logs ()]) >>> [ < WebhookLog BAD_RESPONSE_CODE : response_code = 404 > ] # get the event associated with a log entry logs = await webhook . logs () print (( await logs [ 0 ]) . event ) >>> < WebhookEvent PING : webhook_id = '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' > # delete the webhook, raises exception on failure, `True` on success. print ( await webhook . delete ()) >>> True When interacting with a specific webhook there are two options. For example the two code blocks below have the same result (deleting the webhook), however, the first option uses 2 requests and the second option uses only 1 request. This is because option 1 will request the webhook details, and then send the delete request. Option 2 directly sends the delete request. Option 1 client . webhook ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" ) . delete () Option 2 client . webhook . delete ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" ) Each option can be useful depending on the use case. Option 2 is primarily useful when you do not already have the Webhook object but have the id and only want to perform a single action. Pagination # Up's API uses pagination, this means methods in this library that return more than one record will return a PaginatedList . This is effectively just an iterator. Every page_size records the instance of PaginatedList will make a request for the next page_size records. A limit can be used to limit the maximum number of records returned, when a limit is specified the iterator will never return more than limit but can return less. The default is no limit, so it will return all records. Sync Async from upbankapi import Client client = Client () transactions = client . transactions ( limit = 5 ) print ( transactions ) print ( len ( transactions )) print ( list ( transactions )) from upbankapi import AsyncClient client = AsyncClient () transactions = await client . transactions ( limit = 5 ) print ( transactions ) print ( len ( transactions )) print ([ x async for x in transactions ]) >>> < upbankapi . models . pagination . AsyncPaginatedList object at 0x00000256206D5720 > >>> 2 >>> [ < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > , < Transaction SETTLED : 10.0 AUD [ Interest ] > ] PaginatedList supports slicing , it still returns an iterator and will fetch the records as required. Sync Async from upbankapi import Client client = Client () transactions = client . transactions ( limit = 20 ) print ( list ( transactions [ 10 : 20 ])) from upbankapi import AsyncClient client = AsyncClient () transactions = await client . transactions ( limit = 20 ) print ([ x async for x in transactions [ 10 : 20 ]]) >>> [ < Transaction ...> , ... ] Important While it may appear the slice [:limit] has the same effect as providing the limit argument, it does not, when you specify a limit the code optimises the page size. For example, using the slice [:5] will fetch the first 20 records and return only 5, using limit=5 it will fetch and return the only first 5 records. Alternatively, if you manually specify page_size=5 then both options have the same effect. Rate Limiting # Up's API is rate limited, and a RateLimitExceededException will be raised if you exceed this. After making a request to the API the number of remaining requests will be available through client . rate_limit . remaining . The limit appears to be 1000 requests/h . It's recommended that if you are iterating over transactions at you use a limit or slice to avoid fetching all transactions. Additionally, when fetching a large number of transactions, you should increase the page_size option to reduce the number of individual requests made.","title":"Usage"},{"location":"#usage","text":"This is an unofficial Python API wrapper for the Australian Bank Up's API.","title":"Usage"},{"location":"#installation","text":"Base Async Support pip install up-bank-api pip install up-bank-api [ async ]","title":"Installation"},{"location":"#setup","text":"To use this library you will need a personal access token which can be retrieved from https://developer.up.com.au . When using this library you can either provide the token directly or use the environment variable UP_TOKEN . Sync Async Async Session from upbankapi import Client , NotAuthorizedException # implicitly use the environment variable UP_TOKEN client = Client () # or directly provide token client = Client ( token = \"MY_TOKEN\" ) # check the token is valid try : user_id = client . ping () print ( f \"Authorized: { user_id } \" ) except NotAuthorizedException : print ( \"The token is invalid\" ) import asyncio from upbankapi import AsyncClient , NotAuthorizedException async def main (): # implicitly use the environment variable UP_TOKEN client = AsyncClient () # or directly provide token client = AsyncClient ( token = \"MY_TOKEN\" ) # use a context manager to automatically close the aiohttp session async with AsyncClient () as client : try : user_id = await client . ping () print ( f \"Authorized: { user_id } \" ) except NotAuthorizedException : print ( \"The token is invalid\" ) if __name__ == \"__main__\" : asyncio . run ( main ()) import asyncio import aiohttp from upbankapi import AsyncClient , NotAuthorizedException async def main (): # use a context manager to automatically close the aiohttp session async with aiohttp . ClientSession () as session : # implicitly use the environment variable UP_TOKEN client = AsyncClient ( session = session ) # or directly provide token client = AsyncClient ( token = \"MY_TOKEN\" , session = session ) try : user_id = await client . ping () print ( f \"Authorized: { user_id } \" ) except NotAuthorizedException : print ( \"The token is invalid\" ) if __name__ == \"__main__\" : asyncio . run ( main ()) We will assume top-level await is possible for the following examples.","title":"Setup"},{"location":"#account","text":"Sync Async from upbankapi import Client client = Client () accounts = client . accounts () # get the unique id of an account print ( accounts [ 1 ] . id ) # get a specific account by its unique id account = client . account ( \"d7cd1152-e78a-4ad7-8202-d27cddb02a28\" ) print ( account ) print ( account . balance ) from upbankapi import AsyncClient client = AsyncClient () accounts = await client . accounts () # get the unique id of an account # this is an async paginated list so we must use `await` to get an item # as it may need to make a request to fetch additional content. print (( await accounts [ 1 ]) . id ) # get a specific account by its unique id account = await client . account ( \"d7cd1152-e78a-4ad7-8202-d27cddb02a28\" ) print ( account ) print ( account . balance ) >>> \"d7cd1152-e78a-4ad7-8202-d27cddb02a28\" >>> < Account '\ud83d\udcb0 Savings' ( SAVER ): 12345.67 AUD > >>> 12345.67","title":"Account"},{"location":"#accounts","text":"Sync Async Print all accounts and their transactions from upbankapi import Client , NotAuthorizedException client = Client () accounts = client . accounts () # list accounts for account in accounts : print ( account ) # list transactions for account for transaction in account . transactions ( limit = 10 ): print ( transaction ) >>> < Account 'Up Account' ( TRANSACTIONAL ): 1234.56 AUD > >>> < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > >>> < Account '\ud83d\udcb0 Savings' ( SAVER ): 12345.67 AUD > >>> < Transaction SETTLED : 10.0 AUD [ Interest ] > Print all accounts and their transactions from upbankapi import AsyncClient , NotAuthorizedException client = AsyncClient () accounts = await client . accounts () # list accounts async for account in accounts : print ( account ) # list transactions for account async for transaction in await account . transactions ( limit = 10 ): print ( transaction ) >>> < Account 'Up Account' ( TRANSACTIONAL ): 1234.56 AUD > >>> < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > >>> < Account '\ud83d\udcb0 Savings' ( SAVER ): 12345.67 AUD > >>> < Transaction SETTLED : 10.0 AUD [ Interest ] >","title":"Accounts"},{"location":"#transaction","text":"Sync Async from upbankapi import Client client = Client () # get a specific transaction by its unique id transaction = client . transaction ( \"17c577f2-ae8e-4622-90a7-87d95094c2a9\" ) print ( transaction ) print ( transaction . category ) # the API only gives us a partial category for the transaction, so we can # resolve the full category information using `.category()`. This will # return itself if it's already a full category object. print ( transaction . category . category ()) # we don't need to resolve the full category to use it, for example, # we can fetch all transactions from the parent category of the transaction. transactions = transaction . category . parent . transactions ( limit = 10 ) print ( list ( transactions )) >>> < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > >>> < PartialCategoryParent id = 'takeaway' parent = 'good-life' > >>> < Category 'Takeaway' : id = 'takeaway' parent = 'good-life' > >>> [ < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > ] from upbankapi import AsyncClient client = AsyncClient () # get a specific transaction by its unique id transaction = await client . transaction ( \"17c577f2-ae8e-4622-90a7-87d95094c2a9\" ) print ( transaction ) print ( transaction . category ) # the API only gives us a partial category for the transaction, so we can # resolve the full category information using `.category()`. This will # return itself if it's already a full category object. print ( await transaction . category . category ()) # we don't need to resolve the full category to use it, for example, # we can fetch all transactions from the parent category of the transaction. transactions = await transaction . category . parent . transactions ( limit = 10 ) print ([ x async for x in transactions ]) >>> < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > >>> < PartialCategoryParent id = 'takeaway' parent = 'good-life' > >>> < Category 'Takeaway' : id = 'takeaway' parent = 'good-life' > >>> [ < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > ]","title":"Transaction"},{"location":"#transactions","text":"Sync Async Get all transactions for all accounts print ( list ( client . transactions ())) >>> [ < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > , < Transaction SETTLED : 10.0 AUD [ Interest ] > ] Get all transactions for all accounts print ([ x async for x in await client . transactions ()]) >>> [ < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > , < Transaction SETTLED : 10.0 AUD [ Interest ] > ] Sync Async Get last 5 transactions for a given account SAVINGS_ID = \"d7cd1152-e78a-4ad7-8202-d27cddb02a28\" print ( client . account ( SAVINGS_ID ) . transactions ( limit = 5 )) # alternative which avoids making an extra request for the account details print ( client . transactions ( SAVINGS_ID , limit = 5 )) # using an account object account = client . account ( SAVINGS_ID ) print ( client . transactions ( account , limit = 5 )) >>> [ < Transaction SETTLED : 10.0 AUD [ Interest ] > ] Get last 5 transactions for a given account SAVINGS_ID = \"d7cd1152-e78a-4ad7-8202-d27cddb02a28\" print ( await ( await client . account ( SAVINGS_ID )) . transactions ( limit = 5 )) # alternative which avoids making an extra request for the account details print ( await client . transactions ( SAVINGS_ID , limit = 5 )) # using an account object account = await client . account ( SAVINGS_ID ) print ( await client . transactions ( account , limit = 5 )) >>> [ < Transaction SETTLED : 10.0 AUD [ Interest ] > ]","title":"Transactions"},{"location":"#webhooks","text":"Sync Async List users webhooks print ( list ( client . webhooks ())) >>> [ < Webhook '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' : https : // mywebhook . tld / c2f89ed40e26c936 ( Hello World ! ) > ] Get a specific webhook print ( client . webhook ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" )) # or equivalently print ( client . webhook . get ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" )) >>> < Webhook '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' : https : // mywebhook . tld / c2f89ed40e26c936 ( Hello World ! ) > Create a webhook print ( client . webhook . create ( \"https://mywebhook.tld/c2f89ed40e26c936\" , description = \"Hello World!\" ) ) >>> < Webhook '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' : https : // mywebhook . tld / c2f89ed40e26c936 ( Hello World ! ) > Interacting with a webhook webhook = client . webhook ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" ) # ping the webhook print ( webhook . ping ()) >>> < WebhookEvent PING : webhook_id = '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' > # get the webhooks logs print ( list ( webhook . logs ())) >>> [ < WebhookLog BAD_RESPONSE_CODE : response_code = 404 > ] # get the event associated with a log entry print ( webhook . logs ()[ 0 ] . event ) >>> < WebhookEvent PING : webhook_id = '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' > # delete the webhook, raises exception on failure, `True` on success. print ( webhook . delete ()) >>> True List users webhooks print ([ x async for x in await client . webhooks ()]) >>> [ < Webhook '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' : https : // mywebhook . tld / c2f89ed40e26c936 ( Hello World ! ) > ] Get a specific webhook print ( await client . webhook ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" )) # or equivalently print ( await client . webhook . get ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" )) >>> < Webhook '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' : https : // mywebhook . tld / c2f89ed40e26c936 ( Hello World ! ) > Create a webhook print ( await client . webhook . create ( \"https://mywebhook.tld/c2f89ed40e26c936\" , description = \"Hello World!\" ) ) >>> < Webhook '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' : https : // mywebhook . tld / c2f89ed40e26c936 ( Hello World ! ) > Interacting with a webhook webhook = await client . webhook ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" ) # ping the webhook print ( await webhook . ping ()) >>> < WebhookEvent PING : webhook_id = '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' > # get the webhooks logs print ([ x async for x in await webhook . logs ()]) >>> [ < WebhookLog BAD_RESPONSE_CODE : response_code = 404 > ] # get the event associated with a log entry logs = await webhook . logs () print (( await logs [ 0 ]) . event ) >>> < WebhookEvent PING : webhook_id = '1c3a4fd4-6c57-4aa8-8481-cf31a46bc001' > # delete the webhook, raises exception on failure, `True` on success. print ( await webhook . delete ()) >>> True When interacting with a specific webhook there are two options. For example the two code blocks below have the same result (deleting the webhook), however, the first option uses 2 requests and the second option uses only 1 request. This is because option 1 will request the webhook details, and then send the delete request. Option 2 directly sends the delete request. Option 1 client . webhook ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" ) . delete () Option 2 client . webhook . delete ( \"1c3a4fd4-6c57-4aa8-8481-cf31a46bc001\" ) Each option can be useful depending on the use case. Option 2 is primarily useful when you do not already have the Webhook object but have the id and only want to perform a single action.","title":"Webhooks"},{"location":"#pagination","text":"Up's API uses pagination, this means methods in this library that return more than one record will return a PaginatedList . This is effectively just an iterator. Every page_size records the instance of PaginatedList will make a request for the next page_size records. A limit can be used to limit the maximum number of records returned, when a limit is specified the iterator will never return more than limit but can return less. The default is no limit, so it will return all records. Sync Async from upbankapi import Client client = Client () transactions = client . transactions ( limit = 5 ) print ( transactions ) print ( len ( transactions )) print ( list ( transactions )) from upbankapi import AsyncClient client = AsyncClient () transactions = await client . transactions ( limit = 5 ) print ( transactions ) print ( len ( transactions )) print ([ x async for x in transactions ]) >>> < upbankapi . models . pagination . AsyncPaginatedList object at 0x00000256206D5720 > >>> 2 >>> [ < Transaction SETTLED : - 1.0 AUD [ 7 - Eleven ] > , < Transaction SETTLED : 10.0 AUD [ Interest ] > ] PaginatedList supports slicing , it still returns an iterator and will fetch the records as required. Sync Async from upbankapi import Client client = Client () transactions = client . transactions ( limit = 20 ) print ( list ( transactions [ 10 : 20 ])) from upbankapi import AsyncClient client = AsyncClient () transactions = await client . transactions ( limit = 20 ) print ([ x async for x in transactions [ 10 : 20 ]]) >>> [ < Transaction ...> , ... ] Important While it may appear the slice [:limit] has the same effect as providing the limit argument, it does not, when you specify a limit the code optimises the page size. For example, using the slice [:5] will fetch the first 20 records and return only 5, using limit=5 it will fetch and return the only first 5 records. Alternatively, if you manually specify page_size=5 then both options have the same effect.","title":"Pagination"},{"location":"#rate-limiting","text":"Up's API is rate limited, and a RateLimitExceededException will be raised if you exceed this. After making a request to the API the number of remaining requests will be available through client . rate_limit . remaining . The limit appears to be 1000 requests/h . It's recommended that if you are iterating over transactions at you use a limit or slice to avoid fetching all transactions. Additionally, when fetching a large number of transactions, you should increase the page_size option to reduce the number of individual requests made.","title":"Rate Limiting"},{"location":"reference/async_client/","text":"AsyncClient # upbankapi.AsyncClient # Bases: ClientBase Asynchronous client for interacting with Up's API rate_limit : RateLimit class-attribute # The information regarding the current rate limiting status. webhook = AsyncWebhookAdapter ( self ) instance-attribute # Property for accessing webhook methods. ping () async # Retrieves the users unique id and checks if the token is valid. Returns: Type Description str The users unique id. Raises: Type Description NotAuthorizedException If the token is invalid. account ( account_id ) async # Retrieve a single account by its unique account id. Parameters: Name Type Description Default account_id str The unique identifier for an account. required Returns: Type Description AsyncAccount The specified account. accounts ( type = None , ownership_type = None , * , limit = None , page_size = DEFAULT_PAGE_SIZE ) async # Retrieves a list of the users accounts. Parameters: Name Type Description Default type Optional [ AccountType ] The type of account for which to return records. None ownership_type Optional [ OwnershipType ] The account ownership structure for which to return records. None limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description AsyncPaginatedList [ AsyncAccount ] A paginated list of the accounts. category ( category_id ) async # Retrieve a category by its unique category id. Parameters: Name Type Description Default category_id str The unique identifier for a category. required Returns: Type Description AsyncCategory The specified category. categories ( parent = None ) async # Retrieves a list of categories. Parameters: Name Type Description Default parent Union [ str , PartialCategory ] The parent category/id to filter categories by. Raises exception for invalid category. None Returns: Type Description List [ AsyncCategory ] A list of the categories. categorize ( transaction , category ) async # Assign a category to a transaction. Parameters: Name Type Description Default transaction Union [ str , Transaction ] The transaction/id to change the category on. The transaction must be categorizable otherwise a ValueError will be raised. required category Optional [ Union [ str , PartialCategory ]] The category to assign to the transaction. Setting this to None will de-categorize the transaction. required Returns: Type Description bool True if successful, otherwise raises exception. Raises: Type Description ValueError If the transaction is not categorizable . tags ( * , limit = None , page_size = DEFAULT_PAGE_SIZE ) async # Retrieves a list of the users tags. Parameters: Name Type Description Default limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description AsyncPaginatedList [ AsyncTag ] A paginated list of the tags. add_tags ( transaction , * tags ) async # Add tags to a given transaction. Parameters: Name Type Description Default transaction Union [ str , Transaction ] The transaction/id to add tags on. required *tags Union [ str , Tag ] The tags or tag ids to add to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception. remove_tags ( transaction , * tags ) async # Remove tags from a given transaction. Parameters: Name Type Description Default transaction Union [ str , Transaction ] The transaction/id to remove tags on. required *tags Union [ str , Tag ] The tags or tag ids to remove to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception. transaction ( transaction_id ) async # Retrieve a single transaction by its unique id. Parameters: Name Type Description Default transaction_id str The unique identifier for a transaction. required Returns: Type Description AsyncTransaction The specified transaction. transactions ( account = None , * , status = None , since = None , until = None , category = None , tag = None , limit = None , page_size = DEFAULT_PAGE_SIZE ) async # Retrieves transactions for a specific account or all accounts. Parameters: Name Type Description Default account Union [ str , Account ] An account/id to fetch transactions from. If None , returns transactions across all accounts. None status TransactionStatus The transaction status for which to return records. None since datetime The start datetime from which to return records. None until datetime The end datetime up to which to return records. None category Union [ str , PartialCategory ] The category/id identifier for which to filter transactions. Raises exception for invalid category. None tag Union [ str , Tag ] A transaction tag/id to filter for which to return records. Returns empty if tag does not exist. None limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description AsyncPaginatedList [ AsyncTransaction ] A paginated list of the transactions. webhooks ( * , limit = None , page_size = DEFAULT_PAGE_SIZE ) async # Retrieves a list of the users webhooks. Parameters: Name Type Description Default limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description AsyncPaginatedList [ AsyncWebhook ] A paginated list of the webhooks. upbankapi.client.AsyncWebhookAdapter # Bases: WebhookAdapterBase __call__ ( webhook_id ) # Retrieve a single webhook by its unique id. Parameters: Name Type Description Default webhook_id str The unique identifier for a webhook. required Returns: Type Description Coroutine [ Any , Any , AsyncWebhook ] The specified webhook. get ( webhook_id ) async # Retrieve a single webhook by its unique id. Parameters: Name Type Description Default webhook_id str The unique identifier for a webhook. required Returns: Type Description AsyncWebhook The specified webhook. create ( url , description = None ) async # Registers and returns a new webhook. Parameters: Name Type Description Default url str The URL that this webhook should post events to. required description str An optional description for this webhook, up to 64 characters in length. None Returns: Type Description AsyncWebhook The newly created webhook. ping ( webhook ) async # Pings a webhook by its unique id. Parameters: Name Type Description Default webhook Union [ str , Webhook ] The webhook or webhook id to ping. required Returns: Type Description AsyncWebhookEvent The ping event response. logs ( webhook , * , limit = None , page_size = DEFAULT_PAGE_SIZE ) async # Retrieves the logs from a webhook by id. Parameters: Name Type Description Default webhook Union [ str , Webhook ] The webhook or webhook id to fetch logs from. required limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description AsyncPaginatedList [ AsyncWebhookLog ] A paginated list of the webhook logs. delete ( webhook ) async # Deletes a webhook by its unique id. Parameters: Name Type Description Default webhook Union [ str , Webhook ] The webhook or webhook id to delete. required Returns: Type Description bool True if successful, otherwise raises exception.","title":"AsyncClient"},{"location":"reference/async_client/#asyncclient","text":"","title":"AsyncClient"},{"location":"reference/async_client/#upbankapi.AsyncClient","text":"Bases: ClientBase Asynchronous client for interacting with Up's API","title":"AsyncClient"},{"location":"reference/async_client/#upbankapi.client._async.AsyncClient.rate_limit","text":"The information regarding the current rate limiting status.","title":"rate_limit"},{"location":"reference/async_client/#upbankapi.client._async.AsyncClient.webhook","text":"Property for accessing webhook methods.","title":"webhook"},{"location":"reference/async_client/#upbankapi.client._async.AsyncClient.ping","text":"Retrieves the users unique id and checks if the token is valid. Returns: Type Description str The users unique id. Raises: Type Description NotAuthorizedException If the token is invalid.","title":"ping()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncClient.account","text":"Retrieve a single account by its unique account id. Parameters: Name Type Description Default account_id str The unique identifier for an account. required Returns: Type Description AsyncAccount The specified account.","title":"account()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncClient.accounts","text":"Retrieves a list of the users accounts. Parameters: Name Type Description Default type Optional [ AccountType ] The type of account for which to return records. None ownership_type Optional [ OwnershipType ] The account ownership structure for which to return records. None limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description AsyncPaginatedList [ AsyncAccount ] A paginated list of the accounts.","title":"accounts()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncClient.category","text":"Retrieve a category by its unique category id. Parameters: Name Type Description Default category_id str The unique identifier for a category. required Returns: Type Description AsyncCategory The specified category.","title":"category()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncClient.categories","text":"Retrieves a list of categories. Parameters: Name Type Description Default parent Union [ str , PartialCategory ] The parent category/id to filter categories by. Raises exception for invalid category. None Returns: Type Description List [ AsyncCategory ] A list of the categories.","title":"categories()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncClient.categorize","text":"Assign a category to a transaction. Parameters: Name Type Description Default transaction Union [ str , Transaction ] The transaction/id to change the category on. The transaction must be categorizable otherwise a ValueError will be raised. required category Optional [ Union [ str , PartialCategory ]] The category to assign to the transaction. Setting this to None will de-categorize the transaction. required Returns: Type Description bool True if successful, otherwise raises exception. Raises: Type Description ValueError If the transaction is not categorizable .","title":"categorize()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncClient.tags","text":"Retrieves a list of the users tags. Parameters: Name Type Description Default limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description AsyncPaginatedList [ AsyncTag ] A paginated list of the tags.","title":"tags()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncClient.add_tags","text":"Add tags to a given transaction. Parameters: Name Type Description Default transaction Union [ str , Transaction ] The transaction/id to add tags on. required *tags Union [ str , Tag ] The tags or tag ids to add to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception.","title":"add_tags()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncClient.remove_tags","text":"Remove tags from a given transaction. Parameters: Name Type Description Default transaction Union [ str , Transaction ] The transaction/id to remove tags on. required *tags Union [ str , Tag ] The tags or tag ids to remove to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception.","title":"remove_tags()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncClient.transaction","text":"Retrieve a single transaction by its unique id. Parameters: Name Type Description Default transaction_id str The unique identifier for a transaction. required Returns: Type Description AsyncTransaction The specified transaction.","title":"transaction()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncClient.transactions","text":"Retrieves transactions for a specific account or all accounts. Parameters: Name Type Description Default account Union [ str , Account ] An account/id to fetch transactions from. If None , returns transactions across all accounts. None status TransactionStatus The transaction status for which to return records. None since datetime The start datetime from which to return records. None until datetime The end datetime up to which to return records. None category Union [ str , PartialCategory ] The category/id identifier for which to filter transactions. Raises exception for invalid category. None tag Union [ str , Tag ] A transaction tag/id to filter for which to return records. Returns empty if tag does not exist. None limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description AsyncPaginatedList [ AsyncTransaction ] A paginated list of the transactions.","title":"transactions()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncClient.webhooks","text":"Retrieves a list of the users webhooks. Parameters: Name Type Description Default limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description AsyncPaginatedList [ AsyncWebhook ] A paginated list of the webhooks.","title":"webhooks()"},{"location":"reference/async_client/#upbankapi.client.AsyncWebhookAdapter","text":"Bases: WebhookAdapterBase","title":"AsyncWebhookAdapter"},{"location":"reference/async_client/#upbankapi.client._async.AsyncWebhookAdapter.__call__","text":"Retrieve a single webhook by its unique id. Parameters: Name Type Description Default webhook_id str The unique identifier for a webhook. required Returns: Type Description Coroutine [ Any , Any , AsyncWebhook ] The specified webhook.","title":"__call__()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncWebhookAdapter.get","text":"Retrieve a single webhook by its unique id. Parameters: Name Type Description Default webhook_id str The unique identifier for a webhook. required Returns: Type Description AsyncWebhook The specified webhook.","title":"get()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncWebhookAdapter.create","text":"Registers and returns a new webhook. Parameters: Name Type Description Default url str The URL that this webhook should post events to. required description str An optional description for this webhook, up to 64 characters in length. None Returns: Type Description AsyncWebhook The newly created webhook.","title":"create()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncWebhookAdapter.ping","text":"Pings a webhook by its unique id. Parameters: Name Type Description Default webhook Union [ str , Webhook ] The webhook or webhook id to ping. required Returns: Type Description AsyncWebhookEvent The ping event response.","title":"ping()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncWebhookAdapter.logs","text":"Retrieves the logs from a webhook by id. Parameters: Name Type Description Default webhook Union [ str , Webhook ] The webhook or webhook id to fetch logs from. required limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description AsyncPaginatedList [ AsyncWebhookLog ] A paginated list of the webhook logs.","title":"logs()"},{"location":"reference/async_client/#upbankapi.client._async.AsyncWebhookAdapter.delete","text":"Deletes a webhook by its unique id. Parameters: Name Type Description Default webhook Union [ str , Webhook ] The webhook or webhook id to delete. required Returns: Type Description bool True if successful, otherwise raises exception.","title":"delete()"},{"location":"reference/client/","text":"upbankapi.Client # Bases: ClientBase Synchronous client for interacting with Up's API rate_limit : RateLimit class-attribute # The information regarding the current rate limiting status. webhook = WebhookAdapter ( self ) instance-attribute # Property for accessing webhook methods. ping () # Retrieves the users unique id and checks if the token is valid. Returns: Type Description str The users unique id. Raises: Type Description NotAuthorizedException If the token is invalid. account ( account_id ) # Retrieve a single account by its unique account id. Parameters: Name Type Description Default account_id str The unique identifier for an account. required Returns: Type Description Account The specified account. accounts ( type = None , ownership_type = None , * , limit = None , page_size = DEFAULT_PAGE_SIZE ) # Retrieves a list of the users accounts. Parameters: Name Type Description Default type Optional [ AccountType ] The type of account for which to return records. None ownership_type Optional [ OwnershipType ] The account ownership structure for which to return records. None limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ Account ] A paginated list of the accounts. category ( category_id ) # Retrieve a category by its unique category id. Parameters: Name Type Description Default category_id str The unique identifier for a category. required Returns: Type Description Category The specified category. categories ( parent = None ) # Retrieves a list of categories. Parameters: Name Type Description Default parent Union [ str , PartialCategory ] The parent category/id to filter categories by. Raises exception for invalid category. None Returns: Type Description List [ Category ] A list of the categories. categorize ( transaction , category ) # Assign a category to a transaction. Parameters: Name Type Description Default transaction Union [ str , Transaction ] The transaction/id to change the category on. The transaction must be categorizable otherwise a ValueError will be raised. required category Optional [ Union [ str , PartialCategory ]] The category to assign to the transaction. Setting this to None will de-categorize the transaction. required Returns: Type Description bool True if successful, otherwise raises exception. Raises: Type Description ValueError If the transaction is not categorizable . tags ( * , limit = None , page_size = DEFAULT_PAGE_SIZE ) # Retrieves a list of the users tags. Parameters: Name Type Description Default limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ Tag ] A paginated list of the tags. add_tags ( transaction , * tags ) # Add tags to a given transaction. Parameters: Name Type Description Default transaction Union [ str , Transaction ] The transaction/id to add tags on. required *tags Union [ str , Tag ] The tags or tag ids to add to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception. remove_tags ( transaction , * tags ) # Remove tags from a given transaction. Parameters: Name Type Description Default transaction Union [ str , Transaction ] The transaction/id to remove tags on. required *tags Union [ str , Tag ] The tags or tag ids to remove to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception. transaction ( transaction_id ) # Retrieve a single transaction by its unique id. Parameters: Name Type Description Default transaction_id str The unique identifier for a transaction. required Returns: Type Description Transaction The specified transaction. transactions ( account = None , * , status = None , since = None , until = None , category = None , tag = None , limit = None , page_size = DEFAULT_PAGE_SIZE ) # Retrieves transactions for a specific account or all accounts. Parameters: Name Type Description Default account Union [ str , Account ] An account/id to fetch transactions from. If None , returns transactions across all accounts. None status TransactionStatus The transaction status for which to return records. None since datetime The start datetime from which to return records. None until datetime The end datetime up to which to return records. None category Union [ str , PartialCategory ] The category/id identifier for which to filter transactions. Raises exception for invalid category. None tag Union [ str , Tag ] A transaction tag/id to filter for which to return records. Returns empty if tag does not exist. None limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ Transaction ] A paginated list of the transactions. webhooks ( * , limit = None , page_size = DEFAULT_PAGE_SIZE ) # Retrieves a list of the users webhooks. Parameters: Name Type Description Default limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ Webhook ] A paginated list of the webhooks. upbankapi.client.WebhookAdapter # Bases: WebhookAdapterBase __call__ ( webhook_id ) # Retrieve a single webhook by its unique id. Parameters: Name Type Description Default webhook_id str The unique identifier for a webhook. required Returns: Type Description Webhook The specified webhook. get ( webhook_id ) # Retrieve a single webhook by its unique id. Parameters: Name Type Description Default webhook_id str The unique identifier for a webhook. required Returns: Type Description Webhook The specified webhook. create ( url , description = None ) # Registers and returns a new webhook. Parameters: Name Type Description Default url str The URL that this webhook should post events to. required description str An optional description for this webhook, up to 64 characters in length. None Returns: Type Description Webhook The newly created webhook. ping ( webhook ) # Pings a webhook by its unique id. Parameters: Name Type Description Default webhook Union [ str , Webhook ] The webhook or webhook id to ping. required Returns: Type Description WebhookEvent The ping event response. logs ( webhook , * , limit = None , page_size = DEFAULT_PAGE_SIZE ) # Retrieves the logs from a webhook by id. Parameters: Name Type Description Default webhook Union [ str , Webhook ] The webhook or webhook id to fetch logs from. required limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ WebhookLog ] A paginated list of the webhook logs. delete ( webhook ) # Deletes a webhook by its unique id. Parameters: Name Type Description Default webhook Union [ str , Webhook ] The webhook or webhook id to delete. required Returns: Type Description bool True if successful, otherwise raises exception. upbankapi.models.common.RateLimit # Holds information regarding the current rate limiting status. remaining : int = - 1 instance-attribute # The number of requests remaining.","title":"Client"},{"location":"reference/client/#upbankapi.Client","text":"Bases: ClientBase Synchronous client for interacting with Up's API","title":"Client"},{"location":"reference/client/#upbankapi.client._sync.Client.rate_limit","text":"The information regarding the current rate limiting status.","title":"rate_limit"},{"location":"reference/client/#upbankapi.client._sync.Client.webhook","text":"Property for accessing webhook methods.","title":"webhook"},{"location":"reference/client/#upbankapi.client._sync.Client.ping","text":"Retrieves the users unique id and checks if the token is valid. Returns: Type Description str The users unique id. Raises: Type Description NotAuthorizedException If the token is invalid.","title":"ping()"},{"location":"reference/client/#upbankapi.client._sync.Client.account","text":"Retrieve a single account by its unique account id. Parameters: Name Type Description Default account_id str The unique identifier for an account. required Returns: Type Description Account The specified account.","title":"account()"},{"location":"reference/client/#upbankapi.client._sync.Client.accounts","text":"Retrieves a list of the users accounts. Parameters: Name Type Description Default type Optional [ AccountType ] The type of account for which to return records. None ownership_type Optional [ OwnershipType ] The account ownership structure for which to return records. None limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ Account ] A paginated list of the accounts.","title":"accounts()"},{"location":"reference/client/#upbankapi.client._sync.Client.category","text":"Retrieve a category by its unique category id. Parameters: Name Type Description Default category_id str The unique identifier for a category. required Returns: Type Description Category The specified category.","title":"category()"},{"location":"reference/client/#upbankapi.client._sync.Client.categories","text":"Retrieves a list of categories. Parameters: Name Type Description Default parent Union [ str , PartialCategory ] The parent category/id to filter categories by. Raises exception for invalid category. None Returns: Type Description List [ Category ] A list of the categories.","title":"categories()"},{"location":"reference/client/#upbankapi.client._sync.Client.categorize","text":"Assign a category to a transaction. Parameters: Name Type Description Default transaction Union [ str , Transaction ] The transaction/id to change the category on. The transaction must be categorizable otherwise a ValueError will be raised. required category Optional [ Union [ str , PartialCategory ]] The category to assign to the transaction. Setting this to None will de-categorize the transaction. required Returns: Type Description bool True if successful, otherwise raises exception. Raises: Type Description ValueError If the transaction is not categorizable .","title":"categorize()"},{"location":"reference/client/#upbankapi.client._sync.Client.tags","text":"Retrieves a list of the users tags. Parameters: Name Type Description Default limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ Tag ] A paginated list of the tags.","title":"tags()"},{"location":"reference/client/#upbankapi.client._sync.Client.add_tags","text":"Add tags to a given transaction. Parameters: Name Type Description Default transaction Union [ str , Transaction ] The transaction/id to add tags on. required *tags Union [ str , Tag ] The tags or tag ids to add to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception.","title":"add_tags()"},{"location":"reference/client/#upbankapi.client._sync.Client.remove_tags","text":"Remove tags from a given transaction. Parameters: Name Type Description Default transaction Union [ str , Transaction ] The transaction/id to remove tags on. required *tags Union [ str , Tag ] The tags or tag ids to remove to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception.","title":"remove_tags()"},{"location":"reference/client/#upbankapi.client._sync.Client.transaction","text":"Retrieve a single transaction by its unique id. Parameters: Name Type Description Default transaction_id str The unique identifier for a transaction. required Returns: Type Description Transaction The specified transaction.","title":"transaction()"},{"location":"reference/client/#upbankapi.client._sync.Client.transactions","text":"Retrieves transactions for a specific account or all accounts. Parameters: Name Type Description Default account Union [ str , Account ] An account/id to fetch transactions from. If None , returns transactions across all accounts. None status TransactionStatus The transaction status for which to return records. None since datetime The start datetime from which to return records. None until datetime The end datetime up to which to return records. None category Union [ str , PartialCategory ] The category/id identifier for which to filter transactions. Raises exception for invalid category. None tag Union [ str , Tag ] A transaction tag/id to filter for which to return records. Returns empty if tag does not exist. None limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ Transaction ] A paginated list of the transactions.","title":"transactions()"},{"location":"reference/client/#upbankapi.client._sync.Client.webhooks","text":"Retrieves a list of the users webhooks. Parameters: Name Type Description Default limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ Webhook ] A paginated list of the webhooks.","title":"webhooks()"},{"location":"reference/client/#upbankapi.client.WebhookAdapter","text":"Bases: WebhookAdapterBase","title":"WebhookAdapter"},{"location":"reference/client/#upbankapi.client._sync.WebhookAdapter.__call__","text":"Retrieve a single webhook by its unique id. Parameters: Name Type Description Default webhook_id str The unique identifier for a webhook. required Returns: Type Description Webhook The specified webhook.","title":"__call__()"},{"location":"reference/client/#upbankapi.client._sync.WebhookAdapter.get","text":"Retrieve a single webhook by its unique id. Parameters: Name Type Description Default webhook_id str The unique identifier for a webhook. required Returns: Type Description Webhook The specified webhook.","title":"get()"},{"location":"reference/client/#upbankapi.client._sync.WebhookAdapter.create","text":"Registers and returns a new webhook. Parameters: Name Type Description Default url str The URL that this webhook should post events to. required description str An optional description for this webhook, up to 64 characters in length. None Returns: Type Description Webhook The newly created webhook.","title":"create()"},{"location":"reference/client/#upbankapi.client._sync.WebhookAdapter.ping","text":"Pings a webhook by its unique id. Parameters: Name Type Description Default webhook Union [ str , Webhook ] The webhook or webhook id to ping. required Returns: Type Description WebhookEvent The ping event response.","title":"ping()"},{"location":"reference/client/#upbankapi.client._sync.WebhookAdapter.logs","text":"Retrieves the logs from a webhook by id. Parameters: Name Type Description Default webhook Union [ str , Webhook ] The webhook or webhook id to fetch logs from. required limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ WebhookLog ] A paginated list of the webhook logs.","title":"logs()"},{"location":"reference/client/#upbankapi.client._sync.WebhookAdapter.delete","text":"Deletes a webhook by its unique id. Parameters: Name Type Description Default webhook Union [ str , Webhook ] The webhook or webhook id to delete. required Returns: Type Description bool True if successful, otherwise raises exception.","title":"delete()"},{"location":"reference/client/#upbankapi.models.common.RateLimit","text":"Holds information regarding the current rate limiting status.","title":"RateLimit"},{"location":"reference/client/#upbankapi.models.common.RateLimit.remaining","text":"The number of requests remaining.","title":"remaining"},{"location":"reference/enums/","text":"upbankapi.models.AccountType # Bases: str , Enum SAVER = 'SAVER' class-attribute # TRANSACTIONAL = 'TRANSACTIONAL' class-attribute # upbankapi.models.OwnershipType # Bases: str , Enum INDIVIDUAL = 'INDIVIDUAL' class-attribute # JOINT = 'JOINT' class-attribute # upbankapi.models.TransactionStatus # Bases: str , Enum HELD = 'HELD' class-attribute # SETTLED = 'SETTLED' class-attribute # upbankapi.models.CardPurchaseMethodEnum # Bases: str , Enum BAR_CODE = 'BAR_CODE' class-attribute # OCR = 'OCR' class-attribute # CARD_PIN = 'CARD_PIN' class-attribute # CARD_DETAILS = 'CARD_DETAILS' class-attribute # CARD_ON_FILE = 'CARD_ON_FILE' class-attribute # ECOMMERCE = 'ECOMMERCE' class-attribute # MAGNETIC_STRIPE = 'MAGNETIC_STRIPE' class-attribute # CONTACTLESS = 'CONTACTLESS' class-attribute # upbankapi.models.WebhookDeliveryStatus # Bases: str , Enum DELIVERED = 'DELIVERED' class-attribute # UNDELIVERABLE = 'UNDELIVERABLE' class-attribute # BAD_RESPONSE_CODE = 'BAD_RESPONSE_CODE' class-attribute # upbankapi.models.WebhookEventType # Bases: str , Enum PING = 'PING' class-attribute # TRANSACTION_CREATED = 'TRANSACTION_CREATED' class-attribute # TRANSACTION_SETTLED = 'TRANSACTION_SETTLED' class-attribute # TRANSACTION_DELETED = 'TRANSACTION_DELETED' class-attribute #","title":"Enums"},{"location":"reference/enums/#upbankapi.models.AccountType","text":"Bases: str , Enum","title":"AccountType"},{"location":"reference/enums/#upbankapi.models.accounts.AccountType.SAVER","text":"","title":"SAVER"},{"location":"reference/enums/#upbankapi.models.accounts.AccountType.TRANSACTIONAL","text":"","title":"TRANSACTIONAL"},{"location":"reference/enums/#upbankapi.models.OwnershipType","text":"Bases: str , Enum","title":"OwnershipType"},{"location":"reference/enums/#upbankapi.models.accounts.OwnershipType.INDIVIDUAL","text":"","title":"INDIVIDUAL"},{"location":"reference/enums/#upbankapi.models.accounts.OwnershipType.JOINT","text":"","title":"JOINT"},{"location":"reference/enums/#upbankapi.models.TransactionStatus","text":"Bases: str , Enum","title":"TransactionStatus"},{"location":"reference/enums/#upbankapi.models.transactions.TransactionStatus.HELD","text":"","title":"HELD"},{"location":"reference/enums/#upbankapi.models.transactions.TransactionStatus.SETTLED","text":"","title":"SETTLED"},{"location":"reference/enums/#upbankapi.models.CardPurchaseMethodEnum","text":"Bases: str , Enum","title":"CardPurchaseMethodEnum"},{"location":"reference/enums/#upbankapi.models.transactions.CardPurchaseMethodEnum.BAR_CODE","text":"","title":"BAR_CODE"},{"location":"reference/enums/#upbankapi.models.transactions.CardPurchaseMethodEnum.OCR","text":"","title":"OCR"},{"location":"reference/enums/#upbankapi.models.transactions.CardPurchaseMethodEnum.CARD_PIN","text":"","title":"CARD_PIN"},{"location":"reference/enums/#upbankapi.models.transactions.CardPurchaseMethodEnum.CARD_DETAILS","text":"","title":"CARD_DETAILS"},{"location":"reference/enums/#upbankapi.models.transactions.CardPurchaseMethodEnum.CARD_ON_FILE","text":"","title":"CARD_ON_FILE"},{"location":"reference/enums/#upbankapi.models.transactions.CardPurchaseMethodEnum.ECOMMERCE","text":"","title":"ECOMMERCE"},{"location":"reference/enums/#upbankapi.models.transactions.CardPurchaseMethodEnum.MAGNETIC_STRIPE","text":"","title":"MAGNETIC_STRIPE"},{"location":"reference/enums/#upbankapi.models.transactions.CardPurchaseMethodEnum.CONTACTLESS","text":"","title":"CONTACTLESS"},{"location":"reference/enums/#upbankapi.models.WebhookDeliveryStatus","text":"Bases: str , Enum","title":"WebhookDeliveryStatus"},{"location":"reference/enums/#upbankapi.models.webhooks.WebhookDeliveryStatus.DELIVERED","text":"","title":"DELIVERED"},{"location":"reference/enums/#upbankapi.models.webhooks.WebhookDeliveryStatus.UNDELIVERABLE","text":"","title":"UNDELIVERABLE"},{"location":"reference/enums/#upbankapi.models.webhooks.WebhookDeliveryStatus.BAD_RESPONSE_CODE","text":"","title":"BAD_RESPONSE_CODE"},{"location":"reference/enums/#upbankapi.models.WebhookEventType","text":"Bases: str , Enum","title":"WebhookEventType"},{"location":"reference/enums/#upbankapi.models.webhooks.WebhookEventType.PING","text":"","title":"PING"},{"location":"reference/enums/#upbankapi.models.webhooks.WebhookEventType.TRANSACTION_CREATED","text":"","title":"TRANSACTION_CREATED"},{"location":"reference/enums/#upbankapi.models.webhooks.WebhookEventType.TRANSACTION_SETTLED","text":"","title":"TRANSACTION_SETTLED"},{"location":"reference/enums/#upbankapi.models.webhooks.WebhookEventType.TRANSACTION_DELETED","text":"","title":"TRANSACTION_DELETED"},{"location":"reference/exceptions/","text":"upbankapi.UpBankException # Bases: Exception Base class for all Up specific exceptions, this will not cover all possible exceptions such as network or JSON decoding errors. status () property # The status returned by the Up API title () property # Title of the error detail () property # Detailed description of the error source () property # Source of the error upbankapi.NotAuthorizedException # Bases: UpBankException Raised for an invalid Up token. upbankapi.RateLimitExceededException # Bases: UpBankException Raised when too many requests are made to the API. upbankapi.BadResponseException # Bases: UpBankException Raised when a response from the API is not formatted correctly.","title":"Exceptions"},{"location":"reference/exceptions/#upbankapi.UpBankException","text":"Bases: Exception Base class for all Up specific exceptions, this will not cover all possible exceptions such as network or JSON decoding errors.","title":"UpBankException"},{"location":"reference/exceptions/#upbankapi.exceptions.UpBankException.status","text":"The status returned by the Up API","title":"status()"},{"location":"reference/exceptions/#upbankapi.exceptions.UpBankException.title","text":"Title of the error","title":"title()"},{"location":"reference/exceptions/#upbankapi.exceptions.UpBankException.detail","text":"Detailed description of the error","title":"detail()"},{"location":"reference/exceptions/#upbankapi.exceptions.UpBankException.source","text":"Source of the error","title":"source()"},{"location":"reference/exceptions/#upbankapi.NotAuthorizedException","text":"Bases: UpBankException Raised for an invalid Up token.","title":"NotAuthorizedException"},{"location":"reference/exceptions/#upbankapi.RateLimitExceededException","text":"Bases: UpBankException Raised when too many requests are made to the API.","title":"RateLimitExceededException"},{"location":"reference/exceptions/#upbankapi.BadResponseException","text":"Bases: UpBankException Raised when a response from the API is not formatted correctly.","title":"BadResponseException"},{"location":"reference/models/accounts/","text":"upbankapi.models.Account # Bases: ModelBase Representation of an Account. id : str class-attribute # The unique identifier for this account. name : str class-attribute # The name associated with the account in the Up application. type : AccountType class-attribute # The bank account type of this account. ownership_type : OwnershipType class-attribute # The ownership structure for this account. balance : float class-attribute # The available balance of the account, taking into account any amounts that are currently on hold. balance_in_base_units : int class-attribute # The amount of money in the smallest denomination for the currency. currency : str class-attribute # The ISO 4217 currency code. created_at : datetime class-attribute # The datetime at which this account was first opened. transactions ( * , status = None , since = None , until = None , category = None , tag = None , limit = None , page_size = DEFAULT_PAGE_SIZE ) # Retrieves transactions for this account. Parameters: Name Type Description Default status TransactionStatus The transaction status for which to return records. None since datetime The start datetime from which to return records. None until datetime The end datetime up to which to return records. None category Union [ str , PartialCategory ] The category/id identifier for which to filter transactions. Raises exception for invalid category. None tag Union [ str , Tag ] A transaction tag/id to filter for which to return records. Returns empty if tag does not exist. None limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ Transaction ] A paginated list of the transactions. __repr__ () # Return the representation of the account.","title":"Accounts"},{"location":"reference/models/accounts/#upbankapi.models.Account","text":"Bases: ModelBase Representation of an Account.","title":"Account"},{"location":"reference/models/accounts/#upbankapi.models.accounts.Account.id","text":"The unique identifier for this account.","title":"id"},{"location":"reference/models/accounts/#upbankapi.models.accounts.Account.name","text":"The name associated with the account in the Up application.","title":"name"},{"location":"reference/models/accounts/#upbankapi.models.accounts.Account.type","text":"The bank account type of this account.","title":"type"},{"location":"reference/models/accounts/#upbankapi.models.accounts.Account.ownership_type","text":"The ownership structure for this account.","title":"ownership_type"},{"location":"reference/models/accounts/#upbankapi.models.accounts.Account.balance","text":"The available balance of the account, taking into account any amounts that are currently on hold.","title":"balance"},{"location":"reference/models/accounts/#upbankapi.models.accounts.Account.balance_in_base_units","text":"The amount of money in the smallest denomination for the currency.","title":"balance_in_base_units"},{"location":"reference/models/accounts/#upbankapi.models.accounts.Account.currency","text":"The ISO 4217 currency code.","title":"currency"},{"location":"reference/models/accounts/#upbankapi.models.accounts.Account.created_at","text":"The datetime at which this account was first opened.","title":"created_at"},{"location":"reference/models/accounts/#upbankapi.models.accounts.Account.transactions","text":"Retrieves transactions for this account. Parameters: Name Type Description Default status TransactionStatus The transaction status for which to return records. None since datetime The start datetime from which to return records. None until datetime The end datetime up to which to return records. None category Union [ str , PartialCategory ] The category/id identifier for which to filter transactions. Raises exception for invalid category. None tag Union [ str , Tag ] A transaction tag/id to filter for which to return records. Returns empty if tag does not exist. None limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ Transaction ] A paginated list of the transactions.","title":"transactions()"},{"location":"reference/models/accounts/#upbankapi.models.accounts.Account.__repr__","text":"Return the representation of the account.","title":"__repr__()"},{"location":"reference/models/categories/","text":"upbankapi.models.Tag # Bases: ModelBase Representation of a Tag. id : str class-attribute # The label of the tag, which also acts as the tags unique identifier. transactions ( account = None , * , status = None , since = None , until = None , category = None , limit = None , page_size = DEFAULT_PAGE_SIZE ) # Retrieves transactions for a specific account or all accounts. Parameters: Name Type Description Default account Union [ str , Account ] An account/id to fetch transactions from. If None , returns transactions across all accounts. None status TransactionStatus The transaction status for which to return records. None since datetime The start datetime from which to return records. None until datetime The end datetime up to which to return records. None category Union [ str , PartialCategory ] The category/id identifier for which to filter transactions. Raises exception for invalid category. None limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ Transaction ] A paginated list of the transactions. upbankapi.models.PartialCategory # Bases: ModelBase Representation of a PartialCategory. id : str class-attribute # The unique identifier for this category. This is a human-readable but URL-safe value. category () # Returns the full category information for a partial category. transactions ( account = None , * , status = None , since = None , until = None , tag = None , limit = None , page_size = DEFAULT_PAGE_SIZE ) # Retrieves transactions for a specific account or all accounts. Parameters: Name Type Description Default account Union [ str , Account ] An account/id to fetch transactions from. If None , returns transactions across all accounts. None status TransactionStatus The transaction status for which to return records. None since datetime The start datetime from which to return records. None until datetime The end datetime up to which to return records. None tag Union [ str , Tag ] A transaction tag/id to filter for which to return records. Returns empty if tag does not exist. None limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ Transaction ] A paginated list of the transactions. upbankapi.models.PartialCategoryParent # Bases: PartialCategory Representation of a PartialCategoryParent. This is used when an API response includes a partial category and a partial parent. parent : Optional [ PartialCategory ] = None class-attribute # The parent category of this category, if it exists. upbankapi.models.Category # Bases: PartialCategoryParent Representation of a Category. name : str class-attribute # The name of this category as seen in the Up application. children : List [ PartialCategory ] class-attribute # The subcategories of this category.","title":"Categories"},{"location":"reference/models/categories/#upbankapi.models.Tag","text":"Bases: ModelBase Representation of a Tag.","title":"Tag"},{"location":"reference/models/categories/#upbankapi.models.categories.Tag.id","text":"The label of the tag, which also acts as the tags unique identifier.","title":"id"},{"location":"reference/models/categories/#upbankapi.models.categories.Tag.transactions","text":"Retrieves transactions for a specific account or all accounts. Parameters: Name Type Description Default account Union [ str , Account ] An account/id to fetch transactions from. If None , returns transactions across all accounts. None status TransactionStatus The transaction status for which to return records. None since datetime The start datetime from which to return records. None until datetime The end datetime up to which to return records. None category Union [ str , PartialCategory ] The category/id identifier for which to filter transactions. Raises exception for invalid category. None limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ Transaction ] A paginated list of the transactions.","title":"transactions()"},{"location":"reference/models/categories/#upbankapi.models.PartialCategory","text":"Bases: ModelBase Representation of a PartialCategory.","title":"PartialCategory"},{"location":"reference/models/categories/#upbankapi.models.categories.PartialCategory.id","text":"The unique identifier for this category. This is a human-readable but URL-safe value.","title":"id"},{"location":"reference/models/categories/#upbankapi.models.categories.PartialCategory.category","text":"Returns the full category information for a partial category.","title":"category()"},{"location":"reference/models/categories/#upbankapi.models.categories.PartialCategory.transactions","text":"Retrieves transactions for a specific account or all accounts. Parameters: Name Type Description Default account Union [ str , Account ] An account/id to fetch transactions from. If None , returns transactions across all accounts. None status TransactionStatus The transaction status for which to return records. None since datetime The start datetime from which to return records. None until datetime The end datetime up to which to return records. None tag Union [ str , Tag ] A transaction tag/id to filter for which to return records. Returns empty if tag does not exist. None limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ Transaction ] A paginated list of the transactions.","title":"transactions()"},{"location":"reference/models/categories/#upbankapi.models.PartialCategoryParent","text":"Bases: PartialCategory Representation of a PartialCategoryParent. This is used when an API response includes a partial category and a partial parent.","title":"PartialCategoryParent"},{"location":"reference/models/categories/#upbankapi.models.categories.PartialCategoryParent.parent","text":"The parent category of this category, if it exists.","title":"parent"},{"location":"reference/models/categories/#upbankapi.models.Category","text":"Bases: PartialCategoryParent Representation of a Category.","title":"Category"},{"location":"reference/models/categories/#upbankapi.models.categories.Category.name","text":"The name of this category as seen in the Up application.","title":"name"},{"location":"reference/models/categories/#upbankapi.models.categories.Category.children","text":"The subcategories of this category.","title":"children"},{"location":"reference/models/transactions/","text":"upbankapi.models.Transaction # Bases: ModelBase Representation of a Transaction. id : str class-attribute # The unique identifier for this transaction. status : TransactionStatus class-attribute # The current processing status of this transaction. raw_text : Optional [ str ] = None class-attribute # The original, unprocessed text of the transaction. description : str class-attribute # A short description for this transaction. Usually the merchant name for purchases. message : Optional [ str ] = None class-attribute # Attached message for this transaction, such as a payment message, or a transfer note. categorizable : bool class-attribute # Boolean flag set to true on transactions that support the use of categories. hold_info : Optional [ HoldInfo ] = None class-attribute # The amount and foreign_amount of this transaction while it was/is in the HELD state. round_up : Optional [ RoundUp ] = None class-attribute # Details of how this transaction was rounded-up. If no Round Up was applied this field will be null. cashback : Optional [ Cashback ] = None class-attribute # Provides details of the reimbursement if all or part of this transaction was instantly reimbursed in the form of cashback. amount : float class-attribute # The amount of this transaction in Australian dollars. For transactions that were once HELD but are now SETTLED , refer to the hold_info field for the original amount the transaction was HELD at. amount_in_base_units : int class-attribute # The amount of money in the smallest denomination for the currency. currency : str class-attribute # The ISO 4217 currency code. foreign_amount : Optional [ MoneyObject ] = None class-attribute # The foreign currency amount of this transaction. This field will be None for domestic transactions. card_purchase_method : Optional [ CardPurchaseMethod ] = None class-attribute # Information about the card used for this transaction, if applicable. settled_at : Optional [ datetime ] = None class-attribute # The datetime at which this transaction settled. This field will be None for transactions that are currently in the HELD status. created_at : datetime class-attribute # The datetime at which this transaction was first encountered. category : Optional [ PartialCategoryParent ] = None class-attribute # The category assigned to this transaction. tags : List [ Tag ] class-attribute # The list of tags assigned to this transaction. pending () property # Returns true when the transaction is pending. long_description () property # Returns a longer description using the description and message properties. categorize ( category ) # Assign a category to this transaction. Parameters: Name Type Description Default category Optional [ Union [ str , PartialCategory ]] The category to assign to the transaction. Setting this to None will de-categorize the transaction. required Returns: Type Description bool True if successful, otherwise raises exception. Raises: Type Description ValueError If the transaction is not categorizable . add_tags ( * tags ) # Add tags to this transaction. Parameters: Name Type Description Default *tags Union [ str , Tag ] The tags or tag ids to add to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception. remove_tags ( * tags ) # Remove tags from this transaction. Parameters: Name Type Description Default *tags Union [ str , Tag ] The tags or tag ids to remove to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception. __repr__ () # Return the representation of the transaction. upbankapi.models.transactions.AsyncTransaction # Bases: Transaction categorize ( category ) async # Assign a category to this transaction. Parameters: Name Type Description Default category Optional [ Union [ str , PartialCategory ]] The category to assign to the transaction. Setting this to None will de-categorize the transaction. required Returns: Type Description bool True if successful, otherwise raises exception. Raises: Type Description ValueError If the transaction is not categorizable . add_tags ( * tags ) async # Add tags to this transaction. Parameters: Name Type Description Default *tags Union [ str , Tag ] The tags or tag ids to add to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception. remove_tags ( * tags ) async # Remove tags from this transaction. Parameters: Name Type Description Default *tags Union [ str , Tag ] The tags or tag ids to remove to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception. upbankapi.models.common.MoneyObject # Representation of a MoneyObject. value : float = float ( data [ 'value' ]) instance-attribute # The amount of money. value_in_base_units : int = data [ 'valueInBaseUnits' ] instance-attribute # The amount of money in the smallest denomination for the currency. currency : str = data [ 'currencyCode' ] instance-attribute # The ISO 4217 currency code. upbankapi.models.transactions.HoldInfo # Representation of the HoldInfo object returned by a Transaction . amount : MoneyObject = MoneyObject ( data [ 'amount' ]) instance-attribute # The amount of this transaction while in the HELD status, in Australian dollars. foreign_amount : Optional [ MoneyObject ] = None instance-attribute # The foreign currency amount of this transaction while in the HELD status. This field will be None for domestic transactions. upbankapi.models.transactions.RoundUp # Representation of the RoundUp object returned by a Transaction . amount : MoneyObject = MoneyObject ( data [ 'amount' ]) instance-attribute # The total amount of this Round Up, including any boosts, represented as a negative value. boost_portion : Optional [ MoneyObject ] = None instance-attribute # The portion of the Round Up amount owing to boosted Round Ups, represented as a negative value. If no boost was added to the Round Up this field will be None . upbankapi.models.transactions.Cashback # Representation of the Cashback object returned by a Transaction . amount : MoneyObject = MoneyObject ( data [ 'amount' ]) instance-attribute # The total amount of cashback paid, represented as a positive value. description : str = data [ 'description' ] instance-attribute # A brief description of why this cashback was paid.","title":"Transactions"},{"location":"reference/models/transactions/#upbankapi.models.Transaction","text":"Bases: ModelBase Representation of a Transaction.","title":"Transaction"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.id","text":"The unique identifier for this transaction.","title":"id"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.status","text":"The current processing status of this transaction.","title":"status"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.raw_text","text":"The original, unprocessed text of the transaction.","title":"raw_text"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.description","text":"A short description for this transaction. Usually the merchant name for purchases.","title":"description"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.message","text":"Attached message for this transaction, such as a payment message, or a transfer note.","title":"message"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.categorizable","text":"Boolean flag set to true on transactions that support the use of categories.","title":"categorizable"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.hold_info","text":"The amount and foreign_amount of this transaction while it was/is in the HELD state.","title":"hold_info"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.round_up","text":"Details of how this transaction was rounded-up. If no Round Up was applied this field will be null.","title":"round_up"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.cashback","text":"Provides details of the reimbursement if all or part of this transaction was instantly reimbursed in the form of cashback.","title":"cashback"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.amount","text":"The amount of this transaction in Australian dollars. For transactions that were once HELD but are now SETTLED , refer to the hold_info field for the original amount the transaction was HELD at.","title":"amount"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.amount_in_base_units","text":"The amount of money in the smallest denomination for the currency.","title":"amount_in_base_units"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.currency","text":"The ISO 4217 currency code.","title":"currency"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.foreign_amount","text":"The foreign currency amount of this transaction. This field will be None for domestic transactions.","title":"foreign_amount"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.card_purchase_method","text":"Information about the card used for this transaction, if applicable.","title":"card_purchase_method"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.settled_at","text":"The datetime at which this transaction settled. This field will be None for transactions that are currently in the HELD status.","title":"settled_at"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.created_at","text":"The datetime at which this transaction was first encountered.","title":"created_at"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.category","text":"The category assigned to this transaction.","title":"category"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.tags","text":"The list of tags assigned to this transaction.","title":"tags"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.pending","text":"Returns true when the transaction is pending.","title":"pending()"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.long_description","text":"Returns a longer description using the description and message properties.","title":"long_description()"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.categorize","text":"Assign a category to this transaction. Parameters: Name Type Description Default category Optional [ Union [ str , PartialCategory ]] The category to assign to the transaction. Setting this to None will de-categorize the transaction. required Returns: Type Description bool True if successful, otherwise raises exception. Raises: Type Description ValueError If the transaction is not categorizable .","title":"categorize()"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.add_tags","text":"Add tags to this transaction. Parameters: Name Type Description Default *tags Union [ str , Tag ] The tags or tag ids to add to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception.","title":"add_tags()"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.remove_tags","text":"Remove tags from this transaction. Parameters: Name Type Description Default *tags Union [ str , Tag ] The tags or tag ids to remove to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception.","title":"remove_tags()"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Transaction.__repr__","text":"Return the representation of the transaction.","title":"__repr__()"},{"location":"reference/models/transactions/#upbankapi.models.transactions.AsyncTransaction","text":"Bases: Transaction","title":"AsyncTransaction"},{"location":"reference/models/transactions/#upbankapi.models.transactions.AsyncTransaction.categorize","text":"Assign a category to this transaction. Parameters: Name Type Description Default category Optional [ Union [ str , PartialCategory ]] The category to assign to the transaction. Setting this to None will de-categorize the transaction. required Returns: Type Description bool True if successful, otherwise raises exception. Raises: Type Description ValueError If the transaction is not categorizable .","title":"categorize()"},{"location":"reference/models/transactions/#upbankapi.models.transactions.AsyncTransaction.add_tags","text":"Add tags to this transaction. Parameters: Name Type Description Default *tags Union [ str , Tag ] The tags or tag ids to add to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception.","title":"add_tags()"},{"location":"reference/models/transactions/#upbankapi.models.transactions.AsyncTransaction.remove_tags","text":"Remove tags from this transaction. Parameters: Name Type Description Default *tags Union [ str , Tag ] The tags or tag ids to remove to the transaction. () Returns: Type Description bool True if successful, otherwise raises exception.","title":"remove_tags()"},{"location":"reference/models/transactions/#upbankapi.models.common.MoneyObject","text":"Representation of a MoneyObject.","title":"MoneyObject"},{"location":"reference/models/transactions/#upbankapi.models.common.MoneyObject.value","text":"The amount of money.","title":"value"},{"location":"reference/models/transactions/#upbankapi.models.common.MoneyObject.value_in_base_units","text":"The amount of money in the smallest denomination for the currency.","title":"value_in_base_units"},{"location":"reference/models/transactions/#upbankapi.models.common.MoneyObject.currency","text":"The ISO 4217 currency code.","title":"currency"},{"location":"reference/models/transactions/#upbankapi.models.transactions.HoldInfo","text":"Representation of the HoldInfo object returned by a Transaction .","title":"HoldInfo"},{"location":"reference/models/transactions/#upbankapi.models.transactions.HoldInfo.amount","text":"The amount of this transaction while in the HELD status, in Australian dollars.","title":"amount"},{"location":"reference/models/transactions/#upbankapi.models.transactions.HoldInfo.foreign_amount","text":"The foreign currency amount of this transaction while in the HELD status. This field will be None for domestic transactions.","title":"foreign_amount"},{"location":"reference/models/transactions/#upbankapi.models.transactions.RoundUp","text":"Representation of the RoundUp object returned by a Transaction .","title":"RoundUp"},{"location":"reference/models/transactions/#upbankapi.models.transactions.RoundUp.amount","text":"The total amount of this Round Up, including any boosts, represented as a negative value.","title":"amount"},{"location":"reference/models/transactions/#upbankapi.models.transactions.RoundUp.boost_portion","text":"The portion of the Round Up amount owing to boosted Round Ups, represented as a negative value. If no boost was added to the Round Up this field will be None .","title":"boost_portion"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Cashback","text":"Representation of the Cashback object returned by a Transaction .","title":"Cashback"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Cashback.amount","text":"The total amount of cashback paid, represented as a positive value.","title":"amount"},{"location":"reference/models/transactions/#upbankapi.models.transactions.Cashback.description","text":"A brief description of why this cashback was paid.","title":"description"},{"location":"reference/models/webhooks/","text":"upbankapi.models.Webhook # Bases: ModelBase Representation of a Webhook. id : str class-attribute # The unique identifier for this webhook. url : str class-attribute # The URL that this webhook is configured to POST events to. description : Optional [ str ] = None class-attribute # An optional description that was provided at the time the webhook was created. secret_key : Optional [ str ] = None class-attribute # A shared secret key used to sign all webhook events sent to the configured webhook URL. This field is returned only once, upon the initial creation of the webhook. created_at : datetime class-attribute # The datetime at which this webhook was created. ping () # Sends a ping event to the webhook Returns: Type Description WebhookEvent The ping event response. logs ( * , limit = None , page_size = DEFAULT_PAGE_SIZE ) # Retrieves the logs for this webhook. Parameters: Name Type Description Default limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ WebhookLog ] A paginated list of the webhook logs. delete () # Deletes this webhook. Returns: Type Description bool True if successful, otherwise raises exception. __repr__ () # Return the representation of the webhook. upbankapi.models.WebhookLog # Bases: ModelBase Representation of a WebhookLog entry. id : str class-attribute # The unique identifier for this log entry. event : WebhookEvent class-attribute # The webhook event associated with this log entry. response : Optional [ WebhookResponse ] = None class-attribute # Information about the response that was received from the webhook URL. status : WebhookDeliveryStatus class-attribute # The success or failure status of this delivery attempt. created_at : datetime class-attribute # The datetime at which this log entry was created. __repr__ () # Return the representation of the webhook log. upbankapi.models.WebhookEvent # Bases: ModelBase Representation of a WebhookEvent. id : str class-attribute # The unique identifier for this event. This will remain constant across delivery retries. type : WebhookEventType class-attribute # The type of this event. This can be used to determine what action to take in response to the event. created_at : datetime class-attribute # The datetime at which this event was generated. webhook_id : str class-attribute # The id of the webhook that that event was sent to. transaction_id : Optional [ str ] = None class-attribute # The id of the transaction associated with this webhook. webhook () # Fetch the details of the associated webhook. Returns: Type Description Webhook The associated webhook. transaction () # Fetch the details of the associated transaction. Returns: Type Description Transaction The associated transaction. __repr__ () # Return the representation of the webhook event. upbankapi.models.webhooks.WebhookResponse # Representation of a WebhookResponse. status_code : int = data [ 'statusCode' ] instance-attribute # The HTTP status code received in the response. body : str = data [ 'body' ] instance-attribute # The payload that was received in the response body.","title":"Webhooks"},{"location":"reference/models/webhooks/#upbankapi.models.Webhook","text":"Bases: ModelBase Representation of a Webhook.","title":"Webhook"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.Webhook.id","text":"The unique identifier for this webhook.","title":"id"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.Webhook.url","text":"The URL that this webhook is configured to POST events to.","title":"url"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.Webhook.description","text":"An optional description that was provided at the time the webhook was created.","title":"description"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.Webhook.secret_key","text":"A shared secret key used to sign all webhook events sent to the configured webhook URL. This field is returned only once, upon the initial creation of the webhook.","title":"secret_key"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.Webhook.created_at","text":"The datetime at which this webhook was created.","title":"created_at"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.Webhook.ping","text":"Sends a ping event to the webhook Returns: Type Description WebhookEvent The ping event response.","title":"ping()"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.Webhook.logs","text":"Retrieves the logs for this webhook. Parameters: Name Type Description Default limit int The maximum number of records to return. None page_size int The number of records to return in each page. (max appears to be 100) DEFAULT_PAGE_SIZE Returns: Type Description PaginatedList [ WebhookLog ] A paginated list of the webhook logs.","title":"logs()"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.Webhook.delete","text":"Deletes this webhook. Returns: Type Description bool True if successful, otherwise raises exception.","title":"delete()"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.Webhook.__repr__","text":"Return the representation of the webhook.","title":"__repr__()"},{"location":"reference/models/webhooks/#upbankapi.models.WebhookLog","text":"Bases: ModelBase Representation of a WebhookLog entry.","title":"WebhookLog"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookLog.id","text":"The unique identifier for this log entry.","title":"id"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookLog.event","text":"The webhook event associated with this log entry.","title":"event"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookLog.response","text":"Information about the response that was received from the webhook URL.","title":"response"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookLog.status","text":"The success or failure status of this delivery attempt.","title":"status"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookLog.created_at","text":"The datetime at which this log entry was created.","title":"created_at"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookLog.__repr__","text":"Return the representation of the webhook log.","title":"__repr__()"},{"location":"reference/models/webhooks/#upbankapi.models.WebhookEvent","text":"Bases: ModelBase Representation of a WebhookEvent.","title":"WebhookEvent"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookEvent.id","text":"The unique identifier for this event. This will remain constant across delivery retries.","title":"id"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookEvent.type","text":"The type of this event. This can be used to determine what action to take in response to the event.","title":"type"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookEvent.created_at","text":"The datetime at which this event was generated.","title":"created_at"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookEvent.webhook_id","text":"The id of the webhook that that event was sent to.","title":"webhook_id"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookEvent.transaction_id","text":"The id of the transaction associated with this webhook.","title":"transaction_id"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookEvent.webhook","text":"Fetch the details of the associated webhook. Returns: Type Description Webhook The associated webhook.","title":"webhook()"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookEvent.transaction","text":"Fetch the details of the associated transaction. Returns: Type Description Transaction The associated transaction.","title":"transaction()"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookEvent.__repr__","text":"Return the representation of the webhook event.","title":"__repr__()"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookResponse","text":"Representation of a WebhookResponse.","title":"WebhookResponse"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookResponse.status_code","text":"The HTTP status code received in the response.","title":"status_code"},{"location":"reference/models/webhooks/#upbankapi.models.webhooks.WebhookResponse.body","text":"The payload that was received in the response body.","title":"body"}]}